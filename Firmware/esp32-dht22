#include <WiFi.h>
#include <PubSubClient.h>
#include <DHT.h>

// --- Configurações de Rede ---
const char* ssid = "NOME_DA_SUA_REDE_WIFI";
const char* password = "SENHA_DA_SUA_REDE_WIFI";

// --- Configurações do Broker MQTT ---
const char* mqtt_server = "IP_DO_SEU_BROKER_MQTT"; // Ex: "192.168.1.10"
const int mqtt_port = 1883;

// --- Tópicos MQTT ---
const char* topic_temperature = "hana/externo/senseclima/02/temperature";
const char* topic_humidity = "hana/externo/senseclima/02/humidity";

// --- Configurações do Sensor DHT22 ---
#define DHTPIN 4       // Pino GPIO onde o sensor DHT22 está conectado
#define DHTTYPE DHT22  // Define o tipo do sensor como DHT22

// --- Intervalo de Leitura ---
const long interval = 10000; // Intervalo entre as leituras (10 segundos)
unsigned long previousMillis = 0;

// --- Inicialização de Objetos ---
WiFiClient espClient;
PubSubClient client(espClient);
DHT dht(DHTPIN, DHTTYPE);

// --- Função para conectar ao Wi-Fi ---
void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Conectando-se a ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi conectado!");
  Serial.print("Endereço IP: ");
  Serial.println(WiFi.localIP());
}

// --- Função para reconectar ao Broker MQTT ---
void reconnect() {
  // Loop até reconectar
  while (!client.connected()) {
    Serial.print("Tentando conexão MQTT...");
    // Tenta conectar
    if (client.connect("ESP32Client")) {
      Serial.println("conectado!");
    } else {
      Serial.print("falhou, rc=");
      Serial.print(client.state());
      Serial.println(" tentando novamente em 5 segundos");
      // Espera 5 segundos antes de tentar novamente
      delay(5000);
    }
  }
}

// --- Função de Setup ---
void setup() {
  Serial.begin(115200);
  dht.begin();
  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);
}

// --- Função de Loop Principal ---
void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;

    // Lê a umidade e a temperatura do sensor
    float h = dht.readHumidity();
    float t = dht.readTemperature();

    // Verifica se a leitura falhou
    if (isnan(h) || isnan(t)) {
      Serial.println("Falha ao ler do sensor DHT!");
      return;
    }

    // Converte os valores float para string
    char tempString[8];
    dtostrf(t, 1, 2, tempString);
    
    char humString[8];
    dtostrf(h, 1, 2, humString);

    // Publica os dados nos tópicos MQTT
    client.publish(topic_temperature, tempString);
    client.publish(topic_humidity, humString);

    Serial.print("Temperatura: ");
    Serial.print(tempString);
    Serial.print(" °C | Umidade: ");
    Serial.print(humString);
    Serial.println(" % -> Dados enviados para o broker MQTT");
  }
}
